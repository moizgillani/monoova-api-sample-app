/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiError } from '@apimatic/core';
import { dTOMAccountCloseResponseV1Schema, } from '../models/dTOMAccountCloseResponseV1';
import { dTOMAccountCreateResponseV1Schema, } from '../models/dTOMAccountCreateResponseV1';
import { dTOMAccountGetFinancialsResponseV1Schema, } from '../models/dTOMAccountGetFinancialsResponseV1';
import { dTOMAccountGetResponseV1Schema, } from '../models/dTOMAccountGetResponseV1';
import { dTOMAccountListResponseV1Schema, } from '../models/dTOMAccountListResponseV1';
import { dTOMAccountSendStatementResponseV1Schema, } from '../models/dTOMAccountSendStatementResponseV1';
import { dTOMAccountTransactionsResponseV1Schema, } from '../models/dTOMAccountTransactionsResponseV1';
import { dTOMAccountUpdateResponseV1Schema, } from '../models/dTOMAccountUpdateResponseV1';
import { mAccountCreateSchema } from '../models/mAccountCreate';
import { mAccountSendStatementSchema, } from '../models/mAccountSendStatement';
import { mAccountTransactionsSchema, } from '../models/mAccountTransactions';
import { mAccountUpdateSchema } from '../models/mAccountUpdate';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';
export class MAccountController extends BaseController {
    /**
     * This API generates a transaction details.
     *
     * @param body
     * @return Response from the API call
     */
    async mAccountTransactions(body, requestOptions) {
        const req = this.createRequest('POST', '/mAccount/v1/transactions');
        const mapped = req.prepareArgs({
            body: [body, optional(mAccountTransactionsSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountTransactionsResponseV1Schema, requestOptions);
    }
    /**
     * This API updates a mAccount.
     *
     * @param body
     * @return Response from the API call
     */
    async mAccountUpdate(body, requestOptions) {
        const req = this.createRequest('POST', '/mAccount/v1/update');
        const mapped = req.prepareArgs({
            body: [body, optional(mAccountUpdateSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountUpdateResponseV1Schema, requestOptions);
    }
    /**
     * This API creates an mAccount.
     *
     * @param body
     * @return Response from the API call
     */
    async mAccountCreate(body, requestOptions) {
        const req = this.createRequest('POST', '/mAccount/v1/create');
        const mapped = req.prepareArgs({
            body: [body, optional(mAccountCreateSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountCreateResponseV1Schema, requestOptions);
    }
    /**
     * Returns a list of 16-Digit mAccounts that you own.
     *
     * @return Response from the API call
     */
    async mAccountList(requestOptions) {
        const req = this.createRequest('GET', '/mAccount/v1/listAsIssuer');
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountListResponseV1Schema, requestOptions);
    }
    /**
     * This API closes an mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    async mAccountClose(accountNumber, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({
            accountNumber: [accountNumber, string()],
        });
        req.appendTemplatePath `/mAccount/v1/close/${mapped.accountNumber}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountCloseResponseV1Schema, requestOptions);
    }
    /**
     * This API will return the current financials for an mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    async mAccountGetFinancials(accountNumber, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({
            accountNumber: [accountNumber, bigint()],
        });
        req.appendTemplatePath `/mAccount/v1/financials/${mapped.accountNumber}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountGetFinancialsResponseV1Schema, requestOptions);
    }
    /**
     * This API gets details of an mAccount. Property details.options will contain ALL options and their
     * current values.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    async mAccountGet(accountNumber, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({
            accountNumber: [accountNumber, string()],
        });
        req.appendTemplatePath `/mAccount/v1/get/${mapped.accountNumber}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountGetResponseV1Schema, requestOptions);
    }
    /**
     * This API generates a detailed pdf statement for delivery via email.
     *
     * @param body
     * @return Response from the API call
     */
    async mAccountSendStatement(body, requestOptions) {
        const req = this.createRequest('POST', '/mAccount/v1/sendStatement');
        const mapped = req.prepareArgs({
            body: [body, optional(mAccountSendStatementSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOMAccountSendStatementResponseV1Schema, requestOptions);
    }
}
//# sourceMappingURL=mAccountController.js.map