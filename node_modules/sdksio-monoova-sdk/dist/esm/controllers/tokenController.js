/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiError } from '@apimatic/core';
import { dTOTokenCreateResponseV1Schema, } from '../models/dTOTokenCreateResponseV1';
import { dTOTokenDeleteResponseV1Schema, } from '../models/dTOTokenDeleteResponseV1';
import { dTOTokenGetResponseV1Schema, } from '../models/dTOTokenGetResponseV1';
import { dTOTokenListResponseV1Schema, } from '../models/dTOTokenListResponseV1';
import { dTOTokenUpdateResponseV1Schema, } from '../models/dTOTokenUpdateResponseV1';
import { dTOTokenValidateResponseV1Schema, } from '../models/dTOTokenValidateResponseV1';
import { tokenCreateAustralianBankAccountSchema, } from '../models/tokenCreateAustralianBankAccount';
import { tokenCreateBPAYSchema, } from '../models/tokenCreateBPAY';
import { tokenUpdateAustralianBankAccountSchema, } from '../models/tokenUpdateAustralianBankAccount';
import { tokenUpdateBPAYSchema, } from '../models/tokenUpdateBPAY';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';
export class TokenController extends BaseController {
    /**
     * This API creates a token representing BPAY details by passing a TokenBPAYPayload class in the body.
     *
     * @param body
     * @return Response from the API call
     */
    async tokenCreateBPAY(body, requestOptions) {
        const req = this.createRequest('POST', '/token/v1/createBPAY');
        const mapped = req.prepareArgs({
            body: [body, optional(tokenCreateBPAYSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenCreateResponseV1Schema, requestOptions);
    }
    /**
     * This API will delete the payload attached to the specified token.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    async tokenDelete(token, requestOptions) {
        const req = this.createRequest('DELETE');
        const mapped = req.prepareArgs({ token: [token, string()] });
        req.appendTemplatePath `/token/v1/delete/${mapped.token}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenDeleteResponseV1Schema, requestOptions);
    }
    /**
     * This API provides the ability to update the payload associated with an existing token. For this API,
     * the payload to update is a TokenBPAY class.
     *
     * @param body
     * @return Response from the API call
     */
    async tokenUpdateBPAY(body, requestOptions) {
        const req = this.createRequest('POST', '/token/v1/updateBPAY');
        const mapped = req.prepareArgs({
            body: [body, optional(tokenUpdateBPAYSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenUpdateResponseV1Schema, requestOptions);
    }
    /**
     * This API creates a token representing an Australian Bank Account by passing a
     * TokenAustralianBankAccountPayload class in the body.
     *
     * @param body
     * @return Response from the API call
     */
    async tokenCreateAustralianBankAccount(body, requestOptions) {
        const req = this.createRequest('POST', '/token/v1/createAustralianBankAccount');
        const mapped = req.prepareArgs({
            body: [body, optional(tokenCreateAustralianBankAccountSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenCreateResponseV1Schema, requestOptions);
    }
    /**
     * This API will return the payload attached to the specified token.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    async tokenGet(token, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({ token: [token, string()] });
        req.appendTemplatePath `/token/v1/get/${mapped.token}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenGetResponseV1Schema, requestOptions);
    }
    /**
     * This API validates a token by passing a Token in the body.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    async tokenValidate(token, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({ token: [token, string()] });
        req.appendTemplatePath `/token/v1/validate/${mapped.token}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenValidateResponseV1Schema, requestOptions);
    }
    /**
     * This API will return a list of all tokens associated with the provided mWallet or mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    async tokenList(accountNumber, requestOptions) {
        const req = this.createRequest('GET');
        const mapped = req.prepareArgs({
            accountNumber: [accountNumber, bigint()],
        });
        req.appendTemplatePath `/token/v1/list/${mapped.accountNumber}`;
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenListResponseV1Schema, requestOptions);
    }
    /**
     * This API provides the ability to update the payload associated with an existing token. For this API,
     * the payload to update is a TokenAustralianBankAccount class.
     *
     * @param body
     * @return Response from the API call
     */
    async tokenUpdateAustralianBankAccount(body, requestOptions) {
        const req = this.createRequest('POST', '/token/v1/updateAustralianBankAccount');
        const mapped = req.prepareArgs({
            body: [body, optional(tokenUpdateAustralianBankAccountSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(dTOTokenUpdateResponseV1Schema, requestOptions);
    }
}
//# sourceMappingURL=tokenController.js.map