/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiError } from '@apimatic/core';
import { payIdEnquirySchema } from '../models/payIdEnquiry';
import { payIdRegisterpayIdSchema, } from '../models/payIdRegisterpayId';
import { payIdUpdatePayIdNameSchema, } from '../models/payIdUpdatePayIdName';
import { payIdUpdatePayIdStatusSchema, } from '../models/payIdUpdatePayIdStatus';
import { receivablesEnquiryPayIdResponseV1Schema, } from '../models/receivablesEnquiryPayIdResponseV1';
import { receivablesRegisterPayIdResponseV1Schema, } from '../models/receivablesRegisterPayIdResponseV1';
import { receivablesUpdatePayIdNameResponseV1Schema, } from '../models/receivablesUpdatePayIdNameResponseV1';
import { receivablesUpdatePayIdStatusResponseV1Schema, } from '../models/receivablesUpdatePayIdStatusResponseV1';
import { optional } from '../schema';
import { BaseController } from './baseController';
export class PayIDController extends BaseController {
    /**
     * This endpoint allows the registration of a PayID against an account number. We recommend leaving 10
     * seconds before registering a PayID to ensure an account number has been enabled for NPP. The domains
     * that can be used to register a PayID are restricted. Custom domains are supported but must first be
     * approved, please contact us for configuration. The default domain is monoova.me, if the PayID field
     * is left blank we will generate a check-digited PayID on the Monoova domain.
     *
     * @param body
     * @return Response from the API call
     */
    async receivablesRegisterPayID(body, requestOptions) {
        const req = this.createRequest('POST', '/receivables/v1/payid/registerpayid');
        const mapped = req.prepareArgs({
            body: [body, optional(payIdRegisterpayIdSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(receivablesRegisterPayIdResponseV1Schema, requestOptions);
    }
    /**
     * Use this endpoint to change the name of a PayID.
     *
     * @param body
     * @return Response from the API call
     */
    async receivablesUpdatePayIdName(body, requestOptions) {
        const req = this.createRequest('POST', '/receivables/v1/payid/updatePayIdName');
        const mapped = req.prepareArgs({
            body: [body, optional(payIdUpdatePayIdNameSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(receivablesUpdatePayIdNameResponseV1Schema, requestOptions);
    }
    /**
     * Returns the details of a of a PayID. You must own the PayID to view its information.
     *
     * @param body
     * @return Response from the API call
     */
    async receivablesPayIdEnquiry(body, requestOptions) {
        const req = this.createRequest('POST', '/receivables/v1/payid/payIdEnquiry');
        const mapped = req.prepareArgs({
            body: [body, optional(payIdEnquirySchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(receivablesEnquiryPayIdResponseV1Schema, requestOptions);
    }
    /**
     * Use this endpoint to change the status of a PayID.
     *
     * @param body
     * @return Response from the API call
     */
    async receivablesUpdatePayIdStatus(body, requestOptions) {
        const req = this.createRequest('POST', '/receivables/v1/payid/updatePayIdStatus');
        const mapped = req.prepareArgs({
            body: [body, optional(payIdUpdatePayIdStatusSchema)],
        });
        req.header('Content-Type', 'application/json');
        req.json(mapped.body);
        req.throwOn(400, ApiError, 'Bad request');
        req.throwOn(500, ApiError, 'Internal Server Error');
        return req.callAsJson(receivablesUpdatePayIdStatusResponseV1Schema, requestOptions);
    }
}
//# sourceMappingURL=payIDController.js.map