/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
import { ApiResponse, RequestOptions } from '../core';
import { EventDirectEntryDishonoursWebhook } from '../models/eventDirectEntryDishonoursWebhook';
import { EventInboundDirectCreditWebhook } from '../models/eventInboundDirectCreditWebhook';
import { EventInboundDirectDebitWebhook } from '../models/eventInboundDirectDebitWebhook';
import { EventInboundRtgsImtStatus } from '../models/eventInboundRtgsImtStatus';
import { EventNppPaymentStatusWebhook } from '../models/eventNppPaymentStatusWebhook';
import { EventNppReturnWebhook } from '../models/eventNppReturnWebhook';
import { EventPayToreceivePaymentWebhook } from '../models/eventPayToreceivePaymentWebhook';
import { EventPendingrtgsImtWebhook } from '../models/eventPendingrtgsImtWebhook';
import { EventReceivePaymentWebhook } from '../models/eventReceivePaymentWebhook';
import { BaseController } from './baseController';
export declare class WebhooksController extends BaseController {
    /**
     * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
     * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
     * <strong>NPPReceivePayment</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                    signature that should be used<br/> to verify
     *                                                                    both the integrity of the message as well as
     *                                                                    the source (Monoova). <br/> The signature's
     *                                                                    hashing method is SHA256 and the public key can
     *                                                                    be retrieved from <a
     *                                                                    href="/payments#operation/PublicCertificatePubl
     *                                                                    icKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                    notification.
     * @param body
     * @return Response from the API call
     */
    receivablesReceivePaymentWebhook(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventReceivePaymentWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the direct credit event webhook will allow us to notify you when an inbound direct
     * credit is received on one of your accounts. As direct credits arrive in batches, you will receive
     * the data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
     * <strong>InboundDirectCredit</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                         signature that should be used<br/> to
     *                                                                         verify both the integrity of the message
     *                                                                         as well as the source (Monoova). <br/> The
     *                                                                         signature's hashing method is SHA256 and
     *                                                                         the public key can be retrieved from <a
     *                                                                         href="/payments#operation/PublicCertificat
     *                                                                         ePublicKey"> /public/v1/certificate/public-
     *                                                                         key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                         notification.
     * @param body
     * @return Response from the API call
     */
    inboundDirectCreditWebhook(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventInboundDirectCreditWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the npp payment status event webhook will allow us to notify you when the status of a
     * pending NPP Payment gets updated. Event name:&nbsp;<strong>NppPaymentStatus</strong> <br/>
     * <strong>Note:&nbsp; </strong> Receive an NPP Payment Status Webhook notification when the status of
     * an NPP payment changes so you donâ€™t need to poll for updates.<br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                      signature that should be used<br/> to verify
     *                                                                      both the integrity of the message as well as
     *                                                                      the source (Monoova). <br/> The signature's
     *                                                                      hashing method is SHA256 and the public key
     *                                                                      can be retrieved from <a
     *                                                                      href="/payments#operation/PublicCertificatePu
     *                                                                      blicKey"> /public/v1/certificate/public-key
     *                                                                      </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                      notification.
     * @param body
     * @return Response from the API call
     */
    nppPaymentStatus(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventNppPaymentStatusWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
     * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
     * <strong>PayToReceivePayment</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                         signature that should be used<br/> to
     *                                                                         verify both the integrity of the message
     *                                                                         as well as the source (Monoova). <br/> The
     *                                                                         signature's hashing method is SHA256 and
     *                                                                         the public key can be retrieved from <a
     *                                                                         href="/payments#operation/PublicCertificat
     *                                                                         ePublicKey"> /public/v1/certificate/public-
     *                                                                         key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                         notification.
     * @param body
     * @return Response from the API call
     */
    payToReceivePaymentWebhook(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventPayToreceivePaymentWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the direct debit event webhook will allow us to notify you when an inbound direct
     * debit is received on one of your accounts. As direct debits arrive in batches, you will receive the
     * data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
     * <strong>InboundDirectDebit</strong> <br/> <br/> Note:&nbsp; Source account details do not appear by
     * default, please contact Monoova for further information <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                        signature that should be used<br/> to
     *                                                                        verify both the integrity of the message as
     *                                                                        well as the source (Monoova). <br/> The
     *                                                                        signature's hashing method is SHA256 and
     *                                                                        the public key can be retrieved from <a
     *                                                                        href="/payments#operation/PublicCertificate
     *                                                                        PublicKey"> /public/v1/certificate/public-
     *                                                                        key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                        notification.
     * @param body
     * @return Response from the API call
     */
    inboundDirectDebitWebhook(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventInboundDirectDebitWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the direct entry dishonours event webhook will allow us to notify you when an
     * dishonour transaction is made. Event name:&nbsp;<strong>DirectEntryDishonour</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                           signature that should be used<br/> to
     *                                                                           verify both the integrity of the message
     *                                                                           as well as the source (Monoova). <br/>
     *                                                                           The signature's hashing method is SHA256
     *                                                                           and the public key can be retrieved from
     *                                                                           <a
     *                                                                           href="/payments#operation/PublicCertific
     *                                                                           atePublicKey">
     *                                                                           /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                           notification.
     * @param body
     * @return Response from the API call
     */
    directEntryDishonour(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventDirectEntryDishonoursWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the RTGS/IMT status event webhook will allow us to notify you when status of an
     * RTGS/IMT transaction changes. Event name:&nbsp;<strong>InboundRtgsImtStatus</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                   signature that should be used<br/> to verify
     *                                                                   both the integrity of the message as well as the
     *                                                                   source (Monoova). <br/> The signature's hashing
     *                                                                   method is SHA256 and the public key can be
     *                                                                   retrieved from <a
     *                                                                   href="/payments#operation/PublicCertificatePubli
     *                                                                   cKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook notification.
     * @param body
     * @return Response from the API call
     */
    inboundRtgsImtStatus(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventInboundRtgsImtStatus, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the npp return event webhook will allow us to notify you when an npp payment gets
     * returned is made. Event name:&nbsp;<strong>NppReturn</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic signature
     *                                                               that should be used<br/> to verify both the
     *                                                               integrity of the message as well as the source
     *                                                               (Monoova). <br/> The signature's hashing method is
     *                                                               SHA256 and the public key can be retrieved from <a
     *                                                               href="/payments#operation/PublicCertificatePublicKey
     *                                                               "> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook notification.
     * @param body
     * @return Response from the API call
     */
    nppReturn(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventNppReturnWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
    /**
     * Subscribing to the Pending RTGS/IMT event webhook will allow us to notify you when a RTGS/IMT
     * transaction is received on one of your accounts. As RTGS/IMT transaction arrive in batches, you will
     * receive the data in an JSON array with multiple transactions multiple times per day. Event name:
     * &nbsp;<strong>PendingInboundRtgsImt</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                    signature that should be used<br/> to verify
     *                                                                    both the integrity of the message as well as
     *                                                                    the source (Monoova). <br/> The signature's
     *                                                                    hashing method is SHA256 and the public key can
     *                                                                    be retrieved from <a
     *                                                                    href="/payments#operation/PublicCertificatePubl
     *                                                                    icKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                    notification.
     * @param body
     * @return Response from the API call
     */
    pendingInboundRtgsImt(authorization?: string, verificationSignature?: string, webhookid?: number, body?: EventPendingrtgsImtWebhook, requestOptions?: RequestOptions): Promise<ApiResponse<void>>;
}
