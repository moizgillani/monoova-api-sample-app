"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.ReportsController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOGenericPaymentGenericPaymentSettlementResponseV1_1 = require("../models/dTOGenericPaymentGenericPaymentSettlementResponseV1");
var dTOGenericPaymentGenericPaymentStatementResponseV1_1 = require("../models/dTOGenericPaymentGenericPaymentStatementResponseV1");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var ReportsController = /** @class */ (function (_super) {
    tslib_1.__extends(ReportsController, _super);
    function ReportsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * You may choose to set your mAccounts to settle automatically every day.  If so, the mAccount balance
     * will be brought to zero at 4pm (Sydney time) each business day.  Any positive balance will be
     * disbursed to the bank account you have linked;  any negative balance will be direct debited from the
     * bank account you have linked.  Transactions on weekends, public holidays and after 4pm won’t appear
     * in the settlement report until after 4pm the next business day. <br> This report returns an array of
     * actual disbursements for each transaction that was settled on the given date.  Date is represented
     * by ISO8601 – ‘2016-03-01’ for 1st March 2016.
     *
     * @param date Date is represented by ISO8601 – ‘2016-03-01’ for 1st March 2016.
     * @return Response from the API call
     */
    ReportsController.prototype.reportSettlement = function (date, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ date: [date, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/reports/v1/settlement/", ""], ["/reports/v1/settlement/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOGenericPaymentGenericPaymentSettlementResponseV1_1.dTOGenericPaymentGenericPaymentSettlementResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API returns all successful transactions on the given date. Date is represented by ISO8601 –
     * ‘2016-03-01’ for 1st March 2016.
     *
     * @param date Date is represented by ISO8601 – ‘2016-03-01’ for 1st March 2016.
     * @return Response from the API call
     */
    ReportsController.prototype.reportStatement = function (date, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ date: [date, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/reports/v1/statement/", ""], ["/reports/v1/statement/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOGenericPaymentGenericPaymentStatementResponseV1_1.dTOGenericPaymentGenericPaymentStatementResponseV1Schema, requestOptions)];
            });
        });
    };
    return ReportsController;
}(baseController_1.BaseController));
exports.ReportsController = ReportsController;
var templateObject_1, templateObject_2;
//# sourceMappingURL=reportsController.js.map