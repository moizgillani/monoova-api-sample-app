"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.MAccountController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOMAccountCloseResponseV1_1 = require("../models/dTOMAccountCloseResponseV1");
var dTOMAccountCreateResponseV1_1 = require("../models/dTOMAccountCreateResponseV1");
var dTOMAccountGetFinancialsResponseV1_1 = require("../models/dTOMAccountGetFinancialsResponseV1");
var dTOMAccountGetResponseV1_1 = require("../models/dTOMAccountGetResponseV1");
var dTOMAccountListResponseV1_1 = require("../models/dTOMAccountListResponseV1");
var dTOMAccountSendStatementResponseV1_1 = require("../models/dTOMAccountSendStatementResponseV1");
var dTOMAccountTransactionsResponseV1_1 = require("../models/dTOMAccountTransactionsResponseV1");
var dTOMAccountUpdateResponseV1_1 = require("../models/dTOMAccountUpdateResponseV1");
var mAccountCreate_1 = require("../models/mAccountCreate");
var mAccountSendStatement_1 = require("../models/mAccountSendStatement");
var mAccountTransactions_1 = require("../models/mAccountTransactions");
var mAccountUpdate_1 = require("../models/mAccountUpdate");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var MAccountController = /** @class */ (function (_super) {
    tslib_1.__extends(MAccountController, _super);
    function MAccountController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API generates a transaction details.
     *
     * @param body
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountTransactions = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mAccount/v1/transactions');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mAccountTransactions_1.mAccountTransactionsSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountTransactionsResponseV1_1.dTOMAccountTransactionsResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API updates a mAccount.
     *
     * @param body
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountUpdate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mAccount/v1/update');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mAccountUpdate_1.mAccountUpdateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountUpdateResponseV1_1.dTOMAccountUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API creates an mAccount.
     *
     * @param body
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountCreate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mAccount/v1/create');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mAccountCreate_1.mAccountCreateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountCreateResponseV1_1.dTOMAccountCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns a list of 16-Digit mAccounts that you own.
     *
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountList = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/mAccount/v1/listAsIssuer');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountListResponseV1_1.dTOMAccountListResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API closes an mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountClose = function (accountNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/mAccount/v1/close/", ""], ["/mAccount/v1/close/", ""])), mapped.accountNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountCloseResponseV1_1.dTOMAccountCloseResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will return the current financials for an mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountGetFinancials = function (accountNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.bigint)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/mAccount/v1/financials/", ""], ["/mAccount/v1/financials/", ""])), mapped.accountNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountGetFinancialsResponseV1_1.dTOMAccountGetFinancialsResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API gets details of an mAccount. Property details.options will contain ALL options and their
     * current values.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountGet = function (accountNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/mAccount/v1/get/", ""], ["/mAccount/v1/get/", ""])), mapped.accountNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountGetResponseV1_1.dTOMAccountGetResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API generates a detailed pdf statement for delivery via email.
     *
     * @param body
     * @return Response from the API call
     */
    MAccountController.prototype.mAccountSendStatement = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mAccount/v1/sendStatement');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mAccountSendStatement_1.mAccountSendStatementSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMAccountSendStatementResponseV1_1.dTOMAccountSendStatementResponseV1Schema, requestOptions)];
            });
        });
    };
    return MAccountController;
}(baseController_1.BaseController));
exports.MAccountController = MAccountController;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=mAccountController.js.map