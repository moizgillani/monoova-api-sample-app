"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.VerifyController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOVerifyAccountGetResponseV1_1 = require("../models/dTOVerifyAccountGetResponseV1");
var dTOVerifyAccountInitiateResponseV1_1 = require("../models/dTOVerifyAccountInitiateResponseV1");
var dTOVerifyAccountInitiateResponseV2_1 = require("../models/dTOVerifyAccountInitiateResponseV2");
var dTOVerifyAccountListResponseV1_1 = require("../models/dTOVerifyAccountListResponseV1");
var dTOVerifyAccountUpdateResponseV1_1 = require("../models/dTOVerifyAccountUpdateResponseV1");
var dTOVerifyAccountValidateResponseV1_1 = require("../models/dTOVerifyAccountValidateResponseV1");
var verifyInitiate_1 = require("../models/verifyInitiate");
var verifyUpdate_1 = require("../models/verifyUpdate");
var verifyValidate_1 = require("../models/verifyValidate");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var VerifyController = /** @class */ (function (_super) {
    tslib_1.__extends(VerifyController, _super);
    function VerifyController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Inititiates a verification transaction against a designated bank account.
     *
     * @param body
     * @return Response from the API call
     */
    VerifyController.prototype.verifyAccountInitiate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/verify/v1/aba/initiate');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(verifyInitiate_1.verifyInitiateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountInitiateResponseV1_1.dTOVerifyAccountInitiateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Update the following fields for a verified account&#39;s without reverifying the bank account. Bank
     * Account Title, Has DDR authority
     *
     * @param body
     * @return Response from the API call
     */
    VerifyController.prototype.verifyAccountUpdate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/verify/v1/aba/update');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(verifyUpdate_1.verifyUpdateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountUpdateResponseV1_1.dTOVerifyAccountUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Initiates a verification transaction against a designated bank account or PayID via NPP rail using
     * the v2 endpoint.
     *
     * @param body
     * @return Response from the API call
     */
    VerifyController.prototype.verifyNPPAccountPayIdInitiate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/verify/v2/aba/initiate');
                mapped = req.prepareArgs({ body: [body, (0, schema_1.optional)((0, schema_1.unknown)())] });
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountInitiateResponseV2_1.dTOVerifyAccountInitiateResponseV2Schema, requestOptions)];
            });
        });
    };
    /**
     * Validates a code against a token generated via the initiate call. After 3 failed attempts the token
     * will get locked for 1 hour. Users can retry with same token after 1 hour or initiate a new
     * verification anytime.
     *
     * @param body
     * @return Response from the API call
     */
    VerifyController.prototype.verifyAccountValidate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/verify/v1/aba/validate');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(verifyValidate_1.verifyValidateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountValidateResponseV1_1.dTOVerifyAccountValidateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Get a list of all verified bank accounts.
     *
     * @return Response from the API call
     */
    VerifyController.prototype.verifyAccountList = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/verify/v1/aba/list');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountListResponseV1_1.dTOVerifyAccountListResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Return details for a specific verification token.
     *
     * @param token Generated Token from verify/v1/aba/initiate (Initiates a verification transaction)
     * @return Response from the API call
     */
    VerifyController.prototype.verifyAccountGet = function (token, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ token: [token, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/verify/v1/aba/get/", ""], ["/verify/v1/aba/get/", ""])), mapped.token);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOVerifyAccountGetResponseV1_1.dTOVerifyAccountGetResponseV1Schema, requestOptions)];
            });
        });
    };
    return VerifyController;
}(baseController_1.BaseController));
exports.VerifyController = VerifyController;
var templateObject_1;
//# sourceMappingURL=verifyController.js.map