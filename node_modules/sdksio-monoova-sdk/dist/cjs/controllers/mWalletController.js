"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.MWalletController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOMWalletCloseResponseV1_1 = require("../models/dTOMWalletCloseResponseV1");
var dTOMWalletCreateResponseV1_1 = require("../models/dTOMWalletCreateResponseV1");
var dTOMWalletGetFinancialsResponseV1_1 = require("../models/dTOMWalletGetFinancialsResponseV1");
var dTOMWalletReopenResponseV1_1 = require("../models/dTOMWalletReopenResponseV1");
var dTOMWalletResetPinResponseV1_1 = require("../models/dTOMWalletResetPinResponseV1");
var dTOMWalletSearchResponseV1_1 = require("../models/dTOMWalletSearchResponseV1");
var dTOMWalletTransactionsResponseV1_1 = require("../models/dTOMWalletTransactionsResponseV1");
var dTOMWalletUpdateResponseV1_1 = require("../models/dTOMWalletUpdateResponseV1");
var mWalletCreate_1 = require("../models/mWalletCreate");
var mWalletResetPin_1 = require("../models/mWalletResetPin");
var mWalletTransactions_1 = require("../models/mWalletTransactions");
var mWalletUpdate_1 = require("../models/mWalletUpdate");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var MWalletController = /** @class */ (function (_super) {
    tslib_1.__extends(MWalletController, _super);
    function MWalletController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a new mWallet. This creation process has been mandated by BPAY Pty Ltd as part of
     * the license to use BPAY as a payment method. Ideally client software should mask the pin from the
     * merchant and get the customer to key in the pin number twice to ensure accuracy and to maintain
     * privacy. The pin and the Date of Birth Fields are the ultimate authentication fields that a customer
     * has to allow the payment. If the customer forgets their pin then it can be reset using the ResetPin
     * function. The customer must supply a birth date (or any other significant date) that matches the one
     * that is registered. If a customer queries why a birth date is needed as part of the registration
     * process then it is for this reason. Note: Though specified as a birth date any date of significance
     * would be appropriate. There is no date range checking to check for age etc. The date is used to
     * allow changes to the pin only.
     *
     * @param body
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletCreate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mWallet/v1/create');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mWalletCreate_1.mWalletCreateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletCreateResponseV1_1.dTOMWalletCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will reopen an mWallet that was closed.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
     * @param pin           4 digit numerical pin.
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletReopen = function (accountNumber, pin, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.string)()],
                    pin: [pin, (0, schema_1.number)()]
                });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/mWallet/v1/reopen/", "/", ""], ["/mWallet/v1/reopen/", "/", ""])), mapped.accountNumber, mapped.pin);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletReopenResponseV1_1.dTOMWalletReopenResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API returns an array of mWallets whose authentication fields match the search criteria
     * specified by the identifier. Mobile phone, land line and 16 - Digit mWallet account numbers have all
     * non - numbers stripped and email address is converted to lower case. This is the first function to
     * call when trying to identify a customer with an mWallet. The key piece of information returned for
     * each mWallet is the unique accountNumber that is used in later calls and in the payment gateway.
     *
     * @param identifier Mobile phone number, email address, landline number or the 16-Digit mWallet account
     *                             number
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletSearch = function (identifier, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/mWallet/v1/search');
                mapped = req.prepareArgs({
                    identifier: [identifier, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('identifier', mapped.identifier);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletSearchResponseV1_1.dTOMWalletSearchResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will set an account to be closed and no further financial transactions can be performed in
     * the Engine.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
     * @param pin           4 digit numerical pin.
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletCloseV1 = function (accountNumber, pin, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.bigint)()],
                    pin: [pin, (0, schema_1.number)()]
                });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/mWallet/v1/close/", "/", ""], ["/mWallet/v1/close/", "/", ""])), mapped.accountNumber, mapped.pin);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletCloseResponseV1_1.dTOMWalletCloseResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will return an array of transactions for an mWallet between two dates. Paging is supported
     * by using the skip and take properties of the mWalletTransactionRequestDetails class. The information
     * retrieved is in real - time and represents the same details as displayed on an mAccounts financial
     * statement.
     *
     * @param body
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletTransactions = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mWallet/v1/transactions');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mWalletTransactions_1.mWalletTransactionsSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletTransactionsResponseV1_1.dTOMWalletTransactionsResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will return the current financials for an mWallet.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mWallet
     * @param pin           4 digit numerical pin.
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletGetFinancials = function (accountNumber, pin, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.bigint)()],
                    pin: [pin, (0, schema_1.number)()]
                });
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/mWallet/v1/financials/", "/", ""], ["/mWallet/v1/financials/", "/", ""])), mapped.accountNumber, mapped.pin);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletGetFinancialsResponseV1_1.dTOMWalletGetFinancialsResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API resets a customer's mWallet PIN. The Date of Birth is used to authenticate the user. This
     * API should be used when a customer has forgotten their pin.
     *
     * @param body
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletResetPin = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mWallet/v1/resetPin');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mWalletResetPin_1.mWalletResetPinSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletResetPinResponseV1_1.dTOMWalletResetPinResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API updates an mWallet. This update process has been mandated by BPAY Pty Ltd as part of the
     * license to use BPAY as a payment method. The pin or dateOfBirth Dates are not updatable.
     *
     * @param body
     * @return Response from the API call
     */
    MWalletController.prototype.mWalletUpdate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/mWallet/v1/update');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(mWalletUpdate_1.mWalletUpdateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOMWalletUpdateResponseV1_1.dTOMWalletUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    return MWalletController;
}(baseController_1.BaseController));
exports.MWalletController = MWalletController;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=mWalletController.js.map