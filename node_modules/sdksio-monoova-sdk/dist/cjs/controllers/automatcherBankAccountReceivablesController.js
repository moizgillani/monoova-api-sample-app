"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.AutomatcherBankAccountReceivablesController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var receivablesBatchCreateV1_1 = require("../models/receivablesBatchCreateV1");
var receivablesBatchStatusV1_1 = require("../models/receivablesBatchStatusV1");
var receivablesCreate_1 = require("../models/receivablesCreate");
var receivablesCreateResponseV1_1 = require("../models/receivablesCreateResponseV1");
var receivablesListAccountsV1_1 = require("../models/receivablesListAccountsV1");
var receivablesProcessdirectdebit_1 = require("../models/receivablesProcessdirectdebit");
var receivablesProcessDirectDebitResponseV1_1 = require("../models/receivablesProcessDirectDebitResponseV1");
var receivablesProcessrtgsimt_1 = require("../models/receivablesProcessrtgsimt");
var receivablesRefund_1 = require("../models/receivablesRefund");
var receivablesRefundResponseV1_1 = require("../models/receivablesRefundResponseV1");
var receivablesReportLastSettlementV1_1 = require("../models/receivablesReportLastSettlementV1");
var receivablesStatus_1 = require("../models/receivablesStatus");
var receivablesStatusGetResponseV1_1 = require("../models/receivablesStatusGetResponseV1");
var receivablesStatusSetResponseV1_1 = require("../models/receivablesStatusSetResponseV1");
var transactionCodeEnum_1 = require("../models/transactionCodeEnum");
var transactionTypeEnum_1 = require("../models/transactionTypeEnum");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var AutomatcherBankAccountReceivablesController = /** @class */ (function (_super) {
    tslib_1.__extends(AutomatcherBankAccountReceivablesController, _super);
    function AutomatcherBankAccountReceivablesController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new bank-account number. For the creation of batches of account numbers, please see <a
     * href="/payments#operation/ReceivablesBatchCreate"> /receivables/v1/batchCreate </a> These account
     * numbers can be used along with the returned BSB to receive payments from any bank in Australia.
     * Payments to an invalid bank-account number, i.e. one that has not been created, will be returned by
     * Monoova to the remitting institution. Each account number has a check digit to minimize common payer
     * errors such as adjacent transposition errors or single-digit typos. An optional unique ID can be
     * linked to each account number for your reference. If a unique ID is not provided, Monoova will
     * generate and return one automatically. If isActive is omitted, it will default to false. This can be
     * changed to true via the <a href="/payments#operation/ReceivablesStatus"> /receivables/v1/status</a>
     * endpoint.
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesCreate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/create');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(receivablesCreate_1.receivablesCreateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesCreateResponseV1_1.receivablesCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Bank accounts can be active or inactive. Inactive accounts will have all payments rejected and
     * returned to the payer. Status can be called using either bank account number or clientuniqueId.
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesStatus = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/status');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(receivablesStatus_1.receivablesStatusSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesStatusSetResponseV1_1.receivablesStatusSetResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The report is an application/octet-stream, columns are comma separated. Where a comma(,) or double
     * quote(") is present in any of the below fields, the field will be encased in double quotes and/or
     * escaped as perÂ <a href="https://tools.ietf.org/html/rfc4180" target="_blank">RFC4180</a><br> .
     * <table class="tb"> <tr> <td class="td"> Transaction ID </td> <td class="td"> Batch ID </td> <td
     * class="td"> DateTime </td> <td class="td"> Status </td> <td class="td"> RejectionReason </td> <td
     * class="td"> BSB </td> <td class="td"> AccountNumber </td> <td class="td"> AccountName </td> <td
     * class="td"> Amount </td> <td class="td"> LodgementRef </td> <td class="td"> RemitterName </td> <td
     * class="td"> RespondBeforeDateTime </td> <td class="td"> NameOfUserSupplyingFile </td> <td
     * class="td"> NumberOfUserSupplyingFile </td> <td class="td"> DescriptionOfEntriesOnFile </td> <td
     * class="td"> Indicator </td> <td class="td"> WithholdingTaxAmount (if applicable) </td> <td
     * class="td"> SourceBsb (if applicable) </td> <td class="td"> SourceAccountNumber (if applicable)
     * </td> </tr> <tr> <td class="td"> <br/> <br/> Monoova generated <br/> Unique ID. <br/> Max 12 chars.
     * <br/> <br/> <br/> </td> <td class="td"> Payment Batch ID. <br/> Payments come in batches <br/>
     * throughout the day. <br/> Max 12 chars. Blank if NPP. </td> <td class="td"> AEDT, Sydney. <br/> Max
     * 27 chars. </td> <td class="td"> Transaction status, <br/> possible values:&nbsp; <br/> Pending,
     * Accept, Reject </td> <td class="td"> Text supplied when rejecting<br/> a direct debit. <br/> Max 250
     * Chars </td> <td class="td"> Payee BSB. <br/> Max 7 Chars. </td> <td class="td"> Payee Bank Account
     * <br/> Number. Max 34 chars. </td> <td class="td"> Payer submitted Account <br/> Name. Max 32 chars.
     * </td> <td class="td"> Payment amount, <br/> 2 decimal places <br/> for cents. Max 11 chars. </td>
     * <td class="td"> Payer submitted reference. <br/> Max 280 chars. </td> <td class="td"> Remitting
     * Entity. <br/> Max 140 chars. </td> <td class="td"> Time by when you have to  <br/> respond to the
     * Inbound  <br/> Direct Debit request. </td> <td class="td"> Preferred name of the <br/> User
     * supplying <br/> the Direct Entry file. </td> <td class="td"> This is the User Identification <br/>
     * Number which is assigned by  <br/> APCA and User Financial Institutions. </td> <td class="td">
     * Direct Entry file description. <br/> </td> <td class="td"> Blank; OR 'W' dividend paid to a <br/>
     * resident of a country where a double  <br/> tax agreement is in force. 'X' dividend  <br/> paid to a
     * resident of any other country. <br/> 'Y' interest paid to all non-resident. <br/> Max 1 chars. </td>
     * <td class="td"> Blank OR Payment amount, <br/> 2 decimal places for cents.<br/> Max 9 chars. </td>
     * <td class="td"> Payee BSB. <br/> Max 7 Chars. </td> <td class="td"> Payee Bank Account <br/> Number.
     * Max 34 chars. </td> </tr> </table> <br/> <br> Note&#58; Source account details do not appear by
     * default, please contact Monoova for further information <br/>
     *
     * @param date date format should be 'yyyy-MM-dd' format.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesInboundDirectDebitReportDate = function (date, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ date: [date, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/receivables/v2/inbounddirectdebitreport/", ""], ["/receivables/v2/inbounddirectdebitreport/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson((0, schema_1.unknown)(), requestOptions)];
            });
        });
    };
    /**
     * Returns a report of all received transactions for the day with associated details, this includes
     * Direct Entry and NPP Receivables. If requested multiple times on the current date (calendar day,
     * AEDT), the report is cumulative. E.g. if, on the same day, a report is requested at 10am and another
     * one at 1pm, the report at 1pm will contain all the transactions already contained in the 10am report,
     * in addition to any new transactions. Direct Entry transactions arrive in batches 7 times throughout
     * the day, 8.30am, 11.30am, 14.30pm, 17.30pm, 19.45pm, 21.45pm and 22.50pm (emergency), business days
     * only. NPP Transactions may arrive at anytime, we recommend <a href="/payments#tag/Subscriptions">
     * subscribing to a webhook </a> to receive new transaction notifications. <br/> <br/> The report is an
     * application/octet-stream, columns are comma separated. Where a comma(,) or double quote(") is
     * present in any of the below fields, the field will be encased in double quotes and/or escaped as per
     * <a href="https://tools.ietf.org/html/rfc4180" target="_blank">RFC4180</a><br> Columns are as follows:
     * &nbsp; <style type="text/css"> .tb { table-layout:auto; width:100px;!important } .td { overflow:
     * hidden; white-space:nowrap; text-overflow:ellipsis; !important} </style> <table class="tb"> <tr> <td
     * class="td"> Transaction ID </td> <td class="td"> Batch ID </td> <td class="td"> Datetime </td> <td
     * class="td"> BSB </td> <td class="td"> AccountNumber </td> <td class="td"> AccountName </td> <td
     * class="td"> PayId </td> <td class="td"> PayId Name </td> <td class="td"> TransactionCode </td> <td
     * class="td"> TransactionType </td> <td class="td"> Amount </td> <td class="td"> LodgementRef </td>
     * <td class="td"> RemitterName </td> <td class="td"> Indicator </td> <td class="td">
     * WithholdingTaxAmount (if applicable) </td> <td class="td"> EndToEndId</td> <td class="td">
     * RespondBeforeDateTime </td> <td class="td"> NameOfUserSupplyingFile </td> <td class="td">
     * NumberOfUserSupplyingFile </td> <td class="td"> DescriptionOfEntriesOnFile </td> <td class="td">
     * SourceBsb </td> <td class="td"> SourceAccountNumber </td> <td class="td"> SourceAccountName </td>
     * <td class="td"> CategoryPurposeCode </td> <td class="td"> CreditorReferenceInformation </td> <td
     * class="td"> USINumber </td> <td class="td"> USIScheme </td> <td class="td"> UltimateCreditorName
     * </td> </tr> <tr> <td class="td"> <br/> <br/> Monoova generated <br/> Unique ID. <br/> Max 12 chars.
     * <br/> <br/> <br/> </td> <td class="td"> Payment Batch ID. <br/> Payments come in batches <br/>
     * throughout the day. <br/> Max 12 chars. Blank if NPP. </td> <td class="td"> AEDT, Sydney. <br/> Max
     * 27 chars. </td> <td class="td"> Payee BSB. <br/> Max 7 Chars. </td> <td class="td"> Payee Bank
     * Account <br/> Number. Max 34 chars. </td> <td class="td"> Payer submitted Account <br/> Name. Max 32
     * chars. </td> <td class="td"> Email address for the PayID. <br/> Max 256 chars. </td> <td class="td">
     * Name displayed to the payers <br/> Max 140 chars. </td> <td class="td"> Industry standard
     * transaction <br/> code. â50â for credit. <br/> Refer to Direct entry standard <br/> for definitions
     * 51-57. <br/> Max 5 chars. </td> <td class="td"> Possible Values:<br/> 'DE' or 'NPP'  <br/> </td> <td
     * class="td"> Payment amount, <br/> 2 decimal places <br/> for cents. Max 11 chars. </td> <td
     * class="td"> Payer submitted reference. <br/> Max 280 chars. </td> <td class="td"> Remitting Entity.
     * <br/> Max 140 chars. </td> <td class="td"> Blank; OR 'W' dividend paid to a <br/> resident of a
     * country where a double  <br/> tax agreement is in force. 'X' dividend  <br/> paid to a resident of
     * any other country. <br/> 'Y' interest paid to all non-resident. <br/> Max 1 chars. </td> <td
     * class="td"> Blank OR Payment amount, <br/> 2 decimal places for cents.<br/> Max 9 chars. </td> <td
     * class="td"> Osko End to End identifier <br/> submitted by Payer. <br/> Max 35 chars. </td> <td
     * class="td"> Time by when you have to  <br/> respond to the Inbound  <br/> Direct Debit request.
     * </td> <td class="td"> Preferred name of the <br/> User supplying <br/> the Direct Entry file. </td>
     * <td class="td"> This is the User Identification <br/> Number which is assigned by  <br/> APCA and
     * User Financial Institutions. </td> <td class="td"> Direct Entry file description. <br/> </td> <td
     * class="td"> Payer BSB.<br/> Max 7 Chars.<br/> <br/> </td> <td class="td"> Payer Bank Account Number.
     * <br/> Max 34 chars. <br/> </td> <td class="td"> This field appears for NPP transactions  <br/> only
     * and is the payers bank account name.  <br/> For DE transactions please refer to the  <br/>
     * RemitterName Field. Max 140 Chars. <br/> </td> <td class="td"> NPP payment purpose code, max 4 chars.
     * <br/> Possible values:<br/> Blank, <br/> SALA = Salary, <br/> PENS = SuperAnnuation, <br/> SUPP = E-
     * Invoice, <br/> TAXS = Tax </td> <td class="td"> Used for SALA, PENS, SUPP and TAXS <br/>
     * transactions only. <br/> Reference related to payment type. <br/> Max 35 chars. </td> <td
     * class="td"> Used for PENS code payments only. <br/> Unique Superannuation ID (USI) <br/> Max 35
     * chars. </td> <td class="td"> Used for PENS code payments only. <br/> USI scheme. <br/> Max 35 chars.
     * </td> <td class="td"> Used for PENS code payments only. <br/> Name of the Ultimate Creditor. <br/>
     * Max 140 chars. </td> </tr> </table> <p> Note:&nbsp; Source account details do not appear by default,
     * please contact Monoova for further information. Also note, we will only retrieve 1 month transaction
     * at a time</p> <br/> <h4>Possible transaction codes</h4> <table> <tr> <th>Code</th> <th>Transaction
     * Description</th> </tr> <tr> <td>13</td> <td>Externally initiated debit items </td> </tr> <tr>
     * <td>50</td> <td>Externally initiated credit items with the exception of those bearing Transaction
     * Codes </tr> <tr> <td>51</td> <td>Australian Government Security Interest</td> </tr> <tr> <td>52</td>
     * <td>Family Allowance </td> </tr> <tr> <td>53</td> <td>Pay</td> </tr> <tr> <td>54</td>
     * <td>Pension</td> </tr> <tr> <td>55</td> <td>Allotment</td> </tr> <tr> <td>56</td> <td>Dividend</td>
     * </tr> <tr> <td>57</td> <td>Debenture/Note Interest</td> </tr> </table> <br>
     *
     * @param date            Format:&nbsp; 'yyyyMMddHHmmss'. This becomes the start date of the
     *                                               report if report is being fetched for a date range.
     * @param endDate         Format:&nbsp; yyyyMMddHHmmss. Use this to fetch the report for a
     *                                               date range.
     * @param skip            Number of records to skip. 0 is the first record.
     * @param take            Number of records to take. If endDate is provided maximum take is
     *                                               10000.
     * @param accountNumber   Payee bank account number.
     * @param clientUniqueId  The unique identifier for the account.
     * @param transactionType Possible Values:&nbsp; 'DE' or 'NPP'.
     * @param transactionCode Industry standard transaction code. only applicable for DE.
     *                                               Possible values:&nbsp; â13â for Debit, â50â for credit.Refer to
     *                                               Direct entry standard for definitions 51-57.
     * @param payId           Email address for the PayID.
     * @param payIdName       Name displayed to the payers.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesReportDate = function (date, endDate, skip, take, accountNumber, clientUniqueId, transactionType, transactionCode, payId, payIdName, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    date: [date, (0, schema_1.string)()],
                    endDate: [endDate, (0, schema_1.optional)((0, schema_1.string)())],
                    skip: [skip, (0, schema_1.optional)((0, schema_1.number)())],
                    take: [take, (0, schema_1.optional)((0, schema_1.number)())],
                    accountNumber: [accountNumber, (0, schema_1.optional)((0, schema_1.number)())],
                    clientUniqueId: [clientUniqueId, (0, schema_1.optional)((0, schema_1.string)())],
                    transactionType: [transactionType, (0, schema_1.optional)(transactionTypeEnum_1.transactionTypeEnumSchema)],
                    transactionCode: [transactionCode, (0, schema_1.optional)(transactionCodeEnum_1.transactionCodeEnumSchema)],
                    payId: [payId, (0, schema_1.optional)((0, schema_1.string)())],
                    payIdName: [payIdName, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('endDate', mapped.endDate);
                req.query('skip', mapped.skip);
                req.query('take', mapped.take);
                req.query('accountNumber', mapped.accountNumber);
                req.query('clientUniqueId', mapped.clientUniqueId);
                req.query('transactionType', mapped.transactionType);
                req.query('transactionCode', mapped.transactionCode);
                req.query('payId', mapped.payId);
                req.query('payIdName', mapped.payIdName);
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/receivables/v6/report/", ""], ["/receivables/v6/report/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson((0, schema_1.unknown)(), requestOptions)];
            });
        });
    };
    /**
     * Returns a report of PayTo transactions for the day with associated details. If requested multiple
     * times on the current date (calendar day, AEDT), the report is cumulative. E.g. if, on the same day,
     * a report is requested at 10am and another one at 1pm, the report at 1pm will contain all the
     * transactions already contained in the 10am report, in addition to any new transactions. PayTo
     * Transactions may arrive at anytime, we recommend <a href="/payments#tag/Subscriptions"> subscribing
     * to a webhook </a> to receive new transaction notifications. <br/> <br/> The report is an
     * application/octet-stream, columns are comma separated. Where a comma(,) or double quote(") is
     * present in any of the below fields, the field will be encased in double quotes and/or escaped as per
     * <a href="https://tools.ietf.org/html/rfc4180" target="_blank">RFC4180</a><br> Columns are as follows:
     * &nbsp; <style type="text/css"> .tb { table-layout:auto; width:100px;!important } .td { overflow:
     * hidden; white-space:nowrap; text-overflow:ellipsis; !important} </style> <table class="tb"> <tr> <td
     * class="td"> Transaction ID </td> <td class="td"> Batch ID </td> <td class="td"> Datetime </td> <td
     * class="td"> BSB </td> <td class="td"> AccountNumber </td> <td class="td"> AccountName </td> <td
     * class="td"> PayId </td> <td class="td"> PayId Name </td> <td class="td"> TransactionCode </td> <td
     * class="td"> TransactionType </td> <td class="td"> Amount </td> <td class="td"> LodgementRef </td>
     * <td class="td"> RemitterName </td> <td class="td"> Indicator </td> <td class="td">
     * WithholdingTaxAmount (if applicable) </td> <td class="td"> EndToEndId</td> <td class="td">
     * RespondBeforeDateTime </td> <td class="td"> NameOfUserSupplyingFile </td> <td class="td">
     * NumberOfUserSupplyingFile </td> <td class="td"> DescriptionOfEntriesOnFile </td> <td class="td">
     * SourceBsb </td> <td class="td"> SourceAccountNumber </td> <td class="td"> SourceAccountName </td>
     * <td class="td"> CategoryPurposeCode </td> <td class="td"> CreditorReferenceInformation </td> <td
     * class="td"> USINumber </td> <td class="td"> USIScheme </td> <td class="td"> UltimateCreditorName
     * </td> <td class="td"> MMSId </td> <td class="td"> InitiatingPartyName </td>
     * </tr> <tr> <td class="td"> <br/> <br/> Monoova generated <br/> Unique ID. <br/> Max 12 chars. <br/>
     * <br/> <br/> </td> <td class="td"> Payment Batch ID. <br/> Payments come in batches <br/> throughout
     * the day. <br/> Max 12 chars. Blank if NPP. </td> <td class="td"> AEDT, Sydney. <br/> Max 27 chars.
     * </td> <td class="td"> Payee BSB. <br/> Max 7 Chars. </td> <td class="td"> Payee Bank Account <br/>
     * Number. Max 34 chars. </td> <td class="td"> Payer submitted Account <br/> Name. Max 32 chars. </td>
     * <td class="td"> Email address for the PayID. <br/> Max 256 chars. </td> <td class="td"> Name
     * displayed to the payers <br/> Max 140 chars. </td> <td class="td"> Industry standard transaction
     * <br/> code. â50â for credit. <br/> Refer to Direct entry standard <br/> for definitions 51-57. <br/>
     * Max 5 chars. </td> <td class="td"> Possible Values:<br/> 'DE' or 'NPP'  <br/> </td> <td class="td">
     * Payment amount, <br/> 2 decimal places <br/> for cents. Max 11 chars. </td> <td class="td"> Payer
     * submitted reference. <br/> Max 500 chars. </td> <td class="td"> Remitting Entity. <br/> Max 140
     * chars. </td> <td class="td"> Blank; OR 'W' dividend paid to a <br/> resident of a country where a
     * double  <br/> tax agreement is in force. 'X' dividend  <br/> paid to a resident of any other country.
     * <br/> 'Y' interest paid to all non-resident. <br/> Max 1 chars. </td> <td class="td"> Blank OR
     * Payment amount, <br/> 2 decimal places for cents.<br/> Max 9 chars. </td> <td class="td"> Osko End
     * to End identifier <br/> submitted by Payer. </td> <td class="td"> Time by when you have to  <br/>
     * respond to the Inbound  <br/> Direct Debit request. </td> <td class="td"> Preferred name of the
     * <br/> User supplying <br/> the Direct Entry file. </td> <td class="td"> This is the User
     * Identification <br/> Number which is assigned by  <br/> APCA and User Financial Institutions. </td>
     * <td class="td"> Direct Entry file description. <br/> </td> <td class="td"> Payer BSB.<br/> Max 7
     * Chars.<br/> <br/> </td> <td class="td"> Payer Bank Account Number. <br/> Max 34 chars. <br/> </td>
     * <td class="td"> This field appears for NPP transactions  <br/> only and is the payers bank account
     * name.  <br/> For DE transactions please refer to the  <br/> RemitterName Field. Max 140 Chars. <br/>
     * </td> <td class="td"> NPP payment purpose code, max 4 chars.<br/> Possible values:<br/> Blank, <br/>
     * SALA = Salary, <br/> PENS = SuperAnnuation, <br/> SUPP = E-Invoice, <br/> TAXS = Tax </td> <td
     * class="td"> Used for SALA, PENS, SUPP and TAXS <br/> transactions only. <br/> Reference related to
     * payment type. <br/> Max 35 chars. </td> <td class="td"> Used for PENS code payments only. <br/>
     * Unique Superannuation ID (USI) <br/> Max 35 chars. </td> <td class="td"> Used for PENS code payments
     * only. <br/> USI scheme. <br/> Max 35 chars. </td> <td class="td"> Used for PENS code payments only.
     * <br/> Name of the Ultimate Creditor. <br/> Max 140 chars. </td> <td class="td"> Id assigned by NPPA
     * for payment agreement </td> <td class="td"> Iniation Party name. <br/> </td>
     * </tr> </table> <p> Note:&nbsp; Source account details do not appear by default, please contact
     * Monoova for further information. Also note, we will only retrieve 1 month transaction at a time</p>
     * <br/> <h4>Possible transaction codes</h4> <table> <tr> <th>Code</th> <th>Transaction
     * Description</th> </tr> <tr> <td>13</td> <td>Externally initiated debit items </td> </tr> <tr>
     * <td>50</td> <td>Externally initiated credit items with the exception of those bearing Transaction
     * Codes </tr> <tr> <td>51</td> <td>Australian Government Security Interest</td> </tr> <tr> <td>52</td>
     * <td>Family Allowance </td> </tr> <tr> <td>53</td> <td>Pay</td> </tr> <tr> <td>54</td>
     * <td>Pension</td> </tr> <tr> <td>55</td> <td>Allotment</td> </tr> <tr> <td>56</td> <td>Dividend</td>
     * </tr> <tr> <td>57</td> <td>Debenture/Note Interest</td> </tr> </table> <br>
     *
     * @param date            Format:&nbsp; 'yyyyMMddHHmmss'. This becomes the start date of the
     *                                               report if report is being fetched for a date range.
     * @param endDate         Format:&nbsp; yyyyMMddHHmmss. Use this to fetch the report for a
     *                                               date range.
     * @param skip            Number of records to skip. 0 is the first record.
     * @param take            Number of records to take. If endDate is provided maximum take is
     *                                               10000.
     * @param accountNumber   Payee bank account number.
     * @param clientUniqueId  The unique identifier for the account.
     * @param transactionType Possible Values:&nbsp; 'DE' or 'NPP'.
     * @param transactionCode Industry standard transaction code. only applicable for DE.
     *                                               Possible values:&nbsp; â13â for Debit, â50â for credit.Refer to
     *                                               Direct entry standard for definitions 51-57.
     * @param payId           Email address for the PayID.
     * @param payIdName       Name displayed to the payers.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.payToReceivablesReportDate = function (date, endDate, skip, take, accountNumber, clientUniqueId, transactionType, transactionCode, payId, payIdName, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    date: [date, (0, schema_1.string)()],
                    endDate: [endDate, (0, schema_1.optional)((0, schema_1.string)())],
                    skip: [skip, (0, schema_1.optional)((0, schema_1.number)())],
                    take: [take, (0, schema_1.optional)((0, schema_1.number)())],
                    accountNumber: [accountNumber, (0, schema_1.optional)((0, schema_1.number)())],
                    clientUniqueId: [clientUniqueId, (0, schema_1.optional)((0, schema_1.string)())],
                    transactionType: [transactionType, (0, schema_1.optional)(transactionTypeEnum_1.transactionTypeEnumSchema)],
                    transactionCode: [transactionCode, (0, schema_1.optional)(transactionCodeEnum_1.transactionCodeEnumSchema)],
                    payId: [payId, (0, schema_1.optional)((0, schema_1.string)())],
                    payIdName: [payIdName, (0, schema_1.optional)((0, schema_1.string)())]
                });
                req.query('endDate', mapped.endDate);
                req.query('skip', mapped.skip);
                req.query('take', mapped.take);
                req.query('accountNumber', mapped.accountNumber);
                req.query('clientUniqueId', mapped.clientUniqueId);
                req.query('transactionType', mapped.transactionType);
                req.query('transactionCode', mapped.transactionCode);
                req.query('payId', mapped.payId);
                req.query('payIdName', mapped.payIdName);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/paytoreceivables/v1/report/", ""], ["/paytoreceivables/v1/report/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson((0, schema_1.unknown)(), requestOptions)];
            });
        });
    };
    /**
     * The batch create API has the same functionality as the <a
     * href="/payments#operation/ReceivablesCreate"> /receivables/v1/create  </a> endpoint however it
     * allows you to create up to 50,000 accounts in a single call by submitting a file. We recommend this
     * for circumstances where > 100 accounts need to be created within a short time period.
     * Creation of accounts with isActive=true is restricted to 1000. Multiple batches cannot be requested
     * at the same time, you have to wait for the completion of a batch before requesting a new one.
     * The Batch Create API also supports a lightweight option whereby many accounts can be created by
     * submitting a single line. This option automatically sets isActive = true, hence you can only request
     * the creation of 1000 accounts in one request. For this method, all accounts will be created with the
     * same specified name, and clientuniqueidâs cannot be specified will be automatically generated. <br/>
     * <br/>
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesBatchCreate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/batchCreate');
                req.header('Content-Type', 'application/octet-stream');
                req.formData({
                    body: body
                });
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesBatchCreateV1_1.receivablesBatchCreateV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The batch Status API functions similarly to the <a href="/payments#operation/ReceivablesStatus">
     * /receivables/v1/Status </a> API, however it allows you to update accounts in batch. You can only
     * update 1000 records per request. Multiple batches cannot be requested at the same time, you have to
     * wait for the completion of a batch before requesting a new one. <br/> <br/>
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesbatchStatus = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/batchStatus');
                req.header('Content-Type', 'application/octet-stream');
                req.formData({
                    body: body
                });
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesBatchStatusV1_1.receivablesBatchStatusV1Schema, requestOptions)];
            });
        });
    };
    /**
     * List Accounts will return a list of all account numbers you have linked to your Sign in. <br/>
     * <br/>
     *
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesListAccounts = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/receivables/v1/listAccounts');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesListAccountsV1_1.receivablesListAccountsV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The refund API allows the transfer funds back to the payer for transactions received via EFT. The
     * funds are sent to details as supplied by the payer institution. Please note that not all
     * institutions provide valid payer details, in some cases the refund will not be successful. <br/>
     * <br/>
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesRefund = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/refund');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(receivablesRefund_1.receivablesRefundSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesRefundResponseV1_1.receivablesRefundResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Automatcher accounts can also process direct debits from external organisations against them. By
     * default this behaviour is disabled. If configured to allow direct debits, a notification will be
     * sent when an external party attempts to debit one of your accounts, and if accepted, the funds will
     * be deducted from your sign in mAccount. <br><br> Notification of a pending direct debit are sent via
     * a <a href="/payments#operation/InboundDirectDebitWebhook"> callback </a> or a <a
     * href="/payments#operation/ReceivablesInboundDirectDebitReportDate"> report </a> API can be called to
     * list all pending debits. <br><br> After receiving a notification, you have until 4:00pm next
     * business day (from the time the initial debit is received) to instruct us on what action to take;
     * either approve or reject. If no action is taken the transaction will be placed into a pending status
     * until expiry next business day at 4pm. <br><br> For expiring transactions, the direct debit request
     * will automatically be actioned based on your account default configuration. <br><br> Configuration
     * options are:<br><br> a)  Accept direct debit request for all requests<br> b)  Reject direct debit
     * for all requests <br><br> Note if you do not have sufficient balance in your sign in mAccount you
     * cannot accept direct debits and expiring direct debits will be automatically returned regardless of
     * configuration.
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesProcessDirectDebit = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/processdirectdebit');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(receivablesProcessdirectdebit_1.receivablesProcessdirectdebitSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesProcessDirectDebitResponseV1_1.receivablesProcessDirectDebitResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Automatcher accounts can be configurated to receive Swift Transfers. This includes both RTGS (Real
     * Time Gross Settlement) and IMT (International Money Transfers). <br><br> If the account is not
     * configured to receive Swift Transfers, the transaction will be automatically rejected on our end. If
     * configured to allow RTGS/IMT transactions, a notification will be sent when an external party
     * attempts to credit to one of your accounts, and if accepted, the funds will be credited to your sign
     * in mAccount or nominated mAccount. Please contact Monoova for configuration of account. <br><br>
     * Notification of a RTGS/IMT are sent via a <a
     * href="/payments/payments#operation/PendingInboundRtgsImt"> callback </a> or a <a
     * href="/payments#operation/ReceivablesRTGSIMTReportDate"> report </a> API can be called to list all
     * pending transactions. <br><br> After receiving a notification, you have 2 business days to either
     * confirm or reject. If no action is taken the transaction will be placed into a pending status until
     * expiry. <br><br> For expiring transactions, the RTGS/IMT transactions will automatically be actioned
     * based on your account default configuration. <br><br> Configuration options are:<br><br> a)  Confirm
     * - Accept all incoming RTGS/IMT Transactions<br> b)  Reject  - Reject all incoming RTGS/IMT
     * Transactions <br><br>
     *
     * @param body
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesProcessRtgsImt = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/processRtgsImt');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(receivablesProcessrtgsimt_1.receivablesProcessrtgsimtSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesProcessDirectDebitResponseV1_1.receivablesProcessDirectDebitResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns a report of all received transactions for the day with associated details, this includes
     * RTGS (real-time gross settlement) and International Money Transfer. If requested multiple times on
     * the current date (calendar day, AEDT), the report is cumulative. E.g. if, on the same day, a report
     * is requested at 10am and another one at 1pm, the report at 1pm will contain all the transactions
     * already contained in the 10am report, in addition to any new transactions. <br/> <br/> The report is
     * an application/octet-stream, columns are comma separated. Where a comma(,) or double quote(") is
     * present in any of the below fields, the field will be encased in double quotes and/or escaped as per
     * <a href="https://tools.ietf.org/html/rfc4180" target="_blank">RFC4180</a><br> Columns are as follows:
     * &nbsp; <table class="tb"> <tr> <td class="td"> Transaction ID </td> <td class="td"> AccountNumber
     * </td> <td class="td"> BSB </td> <td class="td"> AccountName </td> <td class="td">
     * TransactionReferenceNumber </td> <td class="td"> Amount </td> <td class="td"> Status </td> <td
     * class="td"> LodgementRef </td> <td class="td"> Date </td> <td class="td"> SourceAccountDetails </td>
     * <td class="td"> RespondBeforeDateTime </td> <td class="td"> RejectReasonDescription </td> <td
     * class="td"> ProcessedDate </td> <td class="td"> SendingOrganisation </td> <td class="td">
     * ReceivingOrganisation </td> <td class="td"> OrderingInstitution </td> <td class="td">
     * OriginatingAddress </td> </tr> <tr> <td class="td"> <br/> <br/> Monoova generated <br/> Unique ID.
     * <br/> Max 12 chars. <br/> <br/> <br/> </td> <td class="td"> Payee Bank Account <br/> Number. Max 34
     * chars. </td> <td class="td"> Payee BSB. <br/> Max 7 Chars. </td> <td class="td"> Payer submitted
     * Account <br/> Name. Max 32 chars. </td> <td class="td"> TransactionReferenceNumber. <br/> Max 21
     * chars. </td> <td class="td"> Payment amount, <br/> 2 decimal places <br/> for cents. Max 11 chars.
     * </td> <td class="td"> Transaction status, <br/> possible values:&nbsp; <br/> Pending, Confirmed and
     * Rejected. </td> <td class="td"> Payer submitted reference. <br/> Max 280 chars. </td> <td
     * class="td"> AEDT, Sydney. <br/> Max 27 chars. </td> <td class="td"> Source Account Name address and
     * account number </td> <td class="td"> The time user has to Confirm/Reject a transaction. AEDT, Sydney.
     * <br/> Max 27 chars. </td> <td class="td"> Reason why transaction was rejected. <br/> Max 500 chars.
     * </td> <td class="td"> The time when transaction was Confirmed/Rejected. AEDT, Sydney. <br/> Max 27
     * chars. </td> <td class="td"> Sending Organisation. <br/> Max 100 chars. </td> <td class="td">
     * Receiving Organisation. <br/> Max 100 chars. </td> <td class="td"> Ordering Institution. <br/> Max
     * 100 chars. </td> <td class="td"> Originating Address. <br/> Max 100 chars. </td>
     *
     *
     *
     *
     *
     * </tr> </table> <br/>
     *
     * @param date    This becomes the start date of the report if report is being fetched for a date range.
     *                          Date format should be 'yyyy-MM-dd' format.
     * @param endDate Use this to fetch the report for a date range. Date format should be 'yyyy-MM-dd'
     *                          format
     * @param skip    Number of records to skip. 1 is the first record.Value should be greater than 0
     * @param take    Number of records to take. If endDate is provided maximum take is 10000.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesRTGSIMTReportDate = function (date, endDate, skip, take, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    date: [date, (0, schema_1.string)()],
                    endDate: [endDate, (0, schema_1.optional)((0, schema_1.string)())],
                    skip: [skip, (0, schema_1.optional)((0, schema_1.number)())],
                    take: [take, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('endDate', mapped.endDate);
                req.query('skip', mapped.skip);
                req.query('take', mapped.take);
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/receivables/v2/rtgsimtReport/", ""], ["/receivables/v2/rtgsimtReport/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson((0, schema_1.unknown)(), requestOptions)];
            });
        });
    };
    /**
     * Returns the status of a bank account number. Without changing the status, this API is used for
     * checking the status of a bank account. Status can be called using either bankaccount number or
     * clientUniqueId.
     *
     * @param bankAccountNumber The bank account number generated.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesStatusByBank = function (bankAccountNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    bankAccountNumber: [bankAccountNumber, (0, schema_1.number)()]
                });
                req.appendTemplatePath(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["/receivables/v1/statusByBankAccount/", ""], ["/receivables/v1/statusByBankAccount/", ""])), mapped.bankAccountNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesStatusGetResponseV1_1.receivablesStatusGetResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns the status of a bank account number. Without changing the status, this API is used for
     * checking the status of a bank account. Status can be called using either bankAccount number or
     * clientUniqueId.
     *
     * @param clientUniqueId An identifier assigned to the account.
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesStatusByClientID = function (clientUniqueId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    clientUniqueId: [clientUniqueId, (0, schema_1.string)()]
                });
                req.appendTemplatePath(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["/receivables/v1/statusByClientID/", ""], ["/receivables/v1/statusByClientID/", ""])), mapped.clientUniqueId);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesStatusGetResponseV1_1.receivablesStatusGetResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns the latest settlement for received funds. We suggest using this as a lightweight polling
     * endpoint to establish when new transactions have been received. Transactions arrive in batches.
     *
     * @return Response from the API call
     */
    AutomatcherBankAccountReceivablesController.prototype.receivablesReportLastSettlement = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/receivables/v1/reportLastSettlement');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesReportLastSettlementV1_1.receivablesReportLastSettlementV1Schema, requestOptions)];
            });
        });
    };
    return AutomatcherBankAccountReceivablesController;
}(baseController_1.BaseController));
exports.AutomatcherBankAccountReceivablesController = AutomatcherBankAccountReceivablesController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=automatcherBankAccountReceivablesController.js.map