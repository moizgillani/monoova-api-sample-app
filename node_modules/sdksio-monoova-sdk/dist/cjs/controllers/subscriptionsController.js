"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.SubscriptionsController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var subscriptionsCreate_1 = require("../models/subscriptionsCreate");
var subscriptionsCreateResponseV1_1 = require("../models/subscriptionsCreateResponseV1");
var subscriptionsDeleteResponseV1_1 = require("../models/subscriptionsDeleteResponseV1");
var subscriptionsListResponseV1_1 = require("../models/subscriptionsListResponseV1");
var subscriptionsReportV1_1 = require("../models/subscriptionsReportV1");
var subscriptionsResendResponseV1_1 = require("../models/subscriptionsResendResponseV1");
var subscriptionsUpdate_1 = require("../models/subscriptionsUpdate");
var subscriptionsUpdateResponseV1_1 = require("../models/subscriptionsUpdateResponseV1");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var SubscriptionsController = /** @class */ (function (_super) {
    tslib_1.__extends(SubscriptionsController, _super);
    function SubscriptionsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a new URL to which callbacks will be sent.
     *
     * @param body
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsCreate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/subscriptions/v1/create');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(subscriptionsCreate_1.subscriptionsCreateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsCreateResponseV1_1.subscriptionsCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns a list of all webhooks registered.
     *
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsList = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/subscriptions/v1/list');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsListResponseV1_1.subscriptionsListResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Resends the associated webhook for the provided webhook ID
     *
     * @param webhookId Unique Id to identify this webhook notification.
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsResendV2 = function (webhookId, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST');
                mapped = req.prepareArgs({ webhookId: [webhookId, (0, schema_1.number)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/subscriptions/v2/resend/", ""], ["/subscriptions/v2/resend/", ""])), mapped.webhookId);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsResendResponseV1_1.subscriptionsResendResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Permanently deletes a webhook.
     *
     * @param id This is the Id of the Subscription you want to delete
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsDelete = function (id, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({ id: [id, (0, schema_1.number)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/subscriptions/v1/delete/", ""], ["/subscriptions/v1/delete/", ""])), mapped.id);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsDeleteResponseV1_1.subscriptionsDeleteResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Updates an existing URL or toggles its status.
     *
     * @param body
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsUpdate = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/subscriptions/v1/update');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(subscriptionsUpdate_1.subscriptionsUpdateSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsUpdateResponseV1_1.subscriptionsUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Provides a historical array of previously sent webhooks
     *
     * @param date date format should be 'yyyy-MM-dd' format.
     * @param skip Number of records to skip. 0 is the first record.
     * @param take Number of records to take. If endDate is provided maximum take is 10000.
     * @return Response from the API call
     */
    SubscriptionsController.prototype.subscriptionsReport = function (date, skip, take, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    date: [date, (0, schema_1.string)()],
                    skip: [skip, (0, schema_1.optional)((0, schema_1.number)())],
                    take: [take, (0, schema_1.optional)((0, schema_1.number)())]
                });
                req.query('skip', mapped.skip);
                req.query('take', mapped.take);
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/subscriptions/v1/report/", ""], ["/subscriptions/v1/report/", ""])), mapped.date);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(subscriptionsReportV1_1.subscriptionsReportV1Schema, requestOptions)];
            });
        });
    };
    return SubscriptionsController;
}(baseController_1.BaseController));
exports.SubscriptionsController = SubscriptionsController;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=subscriptionsController.js.map