"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.TokenController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOTokenCreateResponseV1_1 = require("../models/dTOTokenCreateResponseV1");
var dTOTokenDeleteResponseV1_1 = require("../models/dTOTokenDeleteResponseV1");
var dTOTokenGetResponseV1_1 = require("../models/dTOTokenGetResponseV1");
var dTOTokenListResponseV1_1 = require("../models/dTOTokenListResponseV1");
var dTOTokenUpdateResponseV1_1 = require("../models/dTOTokenUpdateResponseV1");
var dTOTokenValidateResponseV1_1 = require("../models/dTOTokenValidateResponseV1");
var tokenCreateAustralianBankAccount_1 = require("../models/tokenCreateAustralianBankAccount");
var tokenCreateBPAY_1 = require("../models/tokenCreateBPAY");
var tokenUpdateAustralianBankAccount_1 = require("../models/tokenUpdateAustralianBankAccount");
var tokenUpdateBPAY_1 = require("../models/tokenUpdateBPAY");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var TokenController = /** @class */ (function (_super) {
    tslib_1.__extends(TokenController, _super);
    function TokenController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a token representing BPAY details by passing a TokenBPAYPayload class in the body.
     *
     * @param body
     * @return Response from the API call
     */
    TokenController.prototype.tokenCreateBPAY = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/token/v1/createBPAY');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(tokenCreateBPAY_1.tokenCreateBPAYSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenCreateResponseV1_1.dTOTokenCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will delete the payload attached to the specified token.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    TokenController.prototype.tokenDelete = function (token, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('DELETE');
                mapped = req.prepareArgs({ token: [token, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/token/v1/delete/", ""], ["/token/v1/delete/", ""])), mapped.token);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenDeleteResponseV1_1.dTOTokenDeleteResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API provides the ability to update the payload associated with an existing token. For this API,
     * the payload to update is a TokenBPAY class.
     *
     * @param body
     * @return Response from the API call
     */
    TokenController.prototype.tokenUpdateBPAY = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/token/v1/updateBPAY');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(tokenUpdateBPAY_1.tokenUpdateBPAYSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenUpdateResponseV1_1.dTOTokenUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API creates a token representing an Australian Bank Account by passing a
     * TokenAustralianBankAccountPayload class in the body.
     *
     * @param body
     * @return Response from the API call
     */
    TokenController.prototype.tokenCreateAustralianBankAccount = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/token/v1/createAustralianBankAccount');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(tokenCreateAustralianBankAccount_1.tokenCreateAustralianBankAccountSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenCreateResponseV1_1.dTOTokenCreateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will return the payload attached to the specified token.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    TokenController.prototype.tokenGet = function (token, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ token: [token, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/token/v1/get/", ""], ["/token/v1/get/", ""])), mapped.token);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenGetResponseV1_1.dTOTokenGetResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API validates a token by passing a Token in the body.
     *
     * @param token The text (GUID) that identifies the token.
     * @return Response from the API call
     */
    TokenController.prototype.tokenValidate = function (token, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ token: [token, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["/token/v1/validate/", ""], ["/token/v1/validate/", ""])), mapped.token);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenValidateResponseV1_1.dTOTokenValidateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API will return a list of all tokens associated with the provided mWallet or mAccount.
     *
     * @param accountNumber 16-Digit account number that uniquely identifies the mAccount
     * @return Response from the API call
     */
    TokenController.prototype.tokenList = function (accountNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({
                    accountNumber: [accountNumber, (0, schema_1.bigint)()]
                });
                req.appendTemplatePath(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["/token/v1/list/", ""], ["/token/v1/list/", ""])), mapped.accountNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenListResponseV1_1.dTOTokenListResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * This API provides the ability to update the payload associated with an existing token. For this API,
     * the payload to update is a TokenAustralianBankAccount class.
     *
     * @param body
     * @return Response from the API call
     */
    TokenController.prototype.tokenUpdateAustralianBankAccount = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/token/v1/updateAustralianBankAccount');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(tokenUpdateAustralianBankAccount_1.tokenUpdateAustralianBankAccountSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOTokenUpdateResponseV1_1.dTOTokenUpdateResponseV1Schema, requestOptions)];
            });
        });
    };
    return TokenController;
}(baseController_1.BaseController));
exports.TokenController = TokenController;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=tokenController.js.map