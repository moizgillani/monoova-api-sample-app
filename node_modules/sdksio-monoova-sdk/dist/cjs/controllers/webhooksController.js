"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.WebhooksController = void 0;
var tslib_1 = require("tslib");
var eventDirectEntryDishonoursWebhook_1 = require("../models/eventDirectEntryDishonoursWebhook");
var eventInboundDirectCreditWebhook_1 = require("../models/eventInboundDirectCreditWebhook");
var eventInboundDirectDebitWebhook_1 = require("../models/eventInboundDirectDebitWebhook");
var eventInboundRtgsImtStatus_1 = require("../models/eventInboundRtgsImtStatus");
var eventNppPaymentStatusWebhook_1 = require("../models/eventNppPaymentStatusWebhook");
var eventNppReturnWebhook_1 = require("../models/eventNppReturnWebhook");
var eventPayToreceivePaymentWebhook_1 = require("../models/eventPayToreceivePaymentWebhook");
var eventPendingrtgsImtWebhook_1 = require("../models/eventPendingrtgsImtWebhook");
var eventReceivePaymentWebhook_1 = require("../models/eventReceivePaymentWebhook");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var WebhooksController = /** @class */ (function (_super) {
    tslib_1.__extends(WebhooksController, _super);
    function WebhooksController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
     * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
     * <strong>NPPReceivePayment</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                    signature that should be used<br/> to verify
     *                                                                    both the integrity of the message as well as
     *                                                                    the source (Monoova). <br/> The signature's
     *                                                                    hashing method is SHA256 and the public key can
     *                                                                    be retrieved from <a
     *                                                                    href="/payments#operation/PublicCertificatePubl
     *                                                                    icKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                    notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.receivablesReceivePaymentWebhook = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/RECEIVEPAYMENTWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventReceivePaymentWebhook_1.eventReceivePaymentWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the direct credit event webhook will allow us to notify you when an inbound direct
     * credit is received on one of your accounts. As direct credits arrive in batches, you will receive
     * the data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
     * <strong>InboundDirectCredit</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                         signature that should be used<br/> to
     *                                                                         verify both the integrity of the message
     *                                                                         as well as the source (Monoova). <br/> The
     *                                                                         signature's hashing method is SHA256 and
     *                                                                         the public key can be retrieved from <a
     *                                                                         href="/payments#operation/PublicCertificat
     *                                                                         ePublicKey"> /public/v1/certificate/public-
     *                                                                         key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                         notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.inboundDirectCreditWebhook = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/INBOUNDDIRECTCREDITWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventInboundDirectCreditWebhook_1.eventInboundDirectCreditWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the npp payment status event webhook will allow us to notify you when the status of a
     * pending NPP Payment gets updated. Event name:&nbsp;<strong>NppPaymentStatus</strong> <br/>
     * <strong>Note:&nbsp; </strong> Receive an NPP Payment Status Webhook notification when the status of
     * an NPP payment changes so you donâ€™t need to poll for updates.<br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                      signature that should be used<br/> to verify
     *                                                                      both the integrity of the message as well as
     *                                                                      the source (Monoova). <br/> The signature's
     *                                                                      hashing method is SHA256 and the public key
     *                                                                      can be retrieved from <a
     *                                                                      href="/payments#operation/PublicCertificatePu
     *                                                                      blicKey"> /public/v1/certificate/public-key
     *                                                                      </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                      notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.nppPaymentStatus = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/NPPPAYMENTSTATUSWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventNppPaymentStatusWebhook_1.eventNppPaymentStatusWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * When an NPP payment is received, Monoova will send a callback with the below format. To subscribe to
     * a webhook use the <a href="/payments#tag/Subscriptions"> Subscriptions </a> APIs. Event name:&nbsp;
     * <strong>PayToReceivePayment</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                         signature that should be used<br/> to
     *                                                                         verify both the integrity of the message
     *                                                                         as well as the source (Monoova). <br/> The
     *                                                                         signature's hashing method is SHA256 and
     *                                                                         the public key can be retrieved from <a
     *                                                                         href="/payments#operation/PublicCertificat
     *                                                                         ePublicKey"> /public/v1/certificate/public-
     *                                                                         key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                         notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.payToReceivePaymentWebhook = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/PayToReceivePayment_WEBHOOK_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventPayToreceivePaymentWebhook_1.eventPayToreceivePaymentWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the direct debit event webhook will allow us to notify you when an inbound direct
     * debit is received on one of your accounts. As direct debits arrive in batches, you will receive the
     * data in an JSON array with multiple transactions multiple times per day. Event name:&nbsp;
     * <strong>InboundDirectDebit</strong> <br/> <br/> Note:&nbsp; Source account details do not appear by
     * default, please contact Monoova for further information <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                        signature that should be used<br/> to
     *                                                                        verify both the integrity of the message as
     *                                                                        well as the source (Monoova). <br/> The
     *                                                                        signature's hashing method is SHA256 and
     *                                                                        the public key can be retrieved from <a
     *                                                                        href="/payments#operation/PublicCertificate
     *                                                                        PublicKey"> /public/v1/certificate/public-
     *                                                                        key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                        notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.inboundDirectDebitWebhook = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/INBOUNDDIRECTDEBITWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventInboundDirectDebitWebhook_1.eventInboundDirectDebitWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the direct entry dishonours event webhook will allow us to notify you when an
     * dishonour transaction is made. Event name:&nbsp;<strong>DirectEntryDishonour</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                           signature that should be used<br/> to
     *                                                                           verify both the integrity of the message
     *                                                                           as well as the source (Monoova). <br/>
     *                                                                           The signature's hashing method is SHA256
     *                                                                           and the public key can be retrieved from
     *                                                                           <a
     *                                                                           href="/payments#operation/PublicCertific
     *                                                                           atePublicKey">
     *                                                                           /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                           notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.directEntryDishonour = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/DIRECTENTRYDISHONOURSWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventDirectEntryDishonoursWebhook_1.eventDirectEntryDishonoursWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the RTGS/IMT status event webhook will allow us to notify you when status of an
     * RTGS/IMT transaction changes. Event name:&nbsp;<strong>InboundRtgsImtStatus</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                   signature that should be used<br/> to verify
     *                                                                   both the integrity of the message as well as the
     *                                                                   source (Monoova). <br/> The signature's hashing
     *                                                                   method is SHA256 and the public key can be
     *                                                                   retrieved from <a
     *                                                                   href="/payments#operation/PublicCertificatePubli
     *                                                                   cKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.inboundRtgsImtStatus = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/RTGSIMTWEBHOOKSTATUS_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventInboundRtgsImtStatus_1.eventInboundRtgsImtStatusSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the npp return event webhook will allow us to notify you when an npp payment gets
     * returned is made. Event name:&nbsp;<strong>NppReturn</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic signature
     *                                                               that should be used<br/> to verify both the
     *                                                               integrity of the message as well as the source
     *                                                               (Monoova). <br/> The signature's hashing method is
     *                                                               SHA256 and the public key can be retrieved from <a
     *                                                               href="/payments#operation/PublicCertificatePublicKey
     *                                                               "> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.nppReturn = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/RECEIVENPPPAYMENTRETURN_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventNppReturnWebhook_1.eventNppReturnWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    /**
     * Subscribing to the Pending RTGS/IMT event webhook will allow us to notify you when a RTGS/IMT
     * transaction is received on one of your accounts. As RTGS/IMT transaction arrive in batches, you will
     * receive the data in an JSON array with multiple transactions multiple times per day. Event name:
     * &nbsp;<strong>PendingInboundRtgsImt</strong> <br/>
     *
     * @param authorization
     * @param verificationSignature  This is a base64 encoded cryptographic
     *                                                                    signature that should be used<br/> to verify
     *                                                                    both the integrity of the message as well as
     *                                                                    the source (Monoova). <br/> The signature's
     *                                                                    hashing method is SHA256 and the public key can
     *                                                                    be retrieved from <a
     *                                                                    href="/payments#operation/PublicCertificatePubl
     *                                                                    icKey"> /public/v1/certificate/public-key </a>.
     * @param webhookid              Unique Id to identify this webhook
     *                                                                    notification.
     * @param body
     * @return Response from the API call
     */
    WebhooksController.prototype.pendingInboundRtgsImt = function (authorization, verificationSignature, webhookid, body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/PENDINGRTGSIMTWEBHOOK_TARGET_URL');
                mapped = req.prepareArgs({
                    authorization: [authorization, (0, schema_1.optional)((0, schema_1.string)())],
                    verificationSignature: [verificationSignature, (0, schema_1.optional)((0, schema_1.string)())],
                    webhookid: [webhookid, (0, schema_1.optional)((0, schema_1.number)())],
                    body: [body, (0, schema_1.optional)(eventPendingrtgsImtWebhook_1.eventPendingrtgsImtWebhookSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.header('Authorization', mapped.authorization);
                req.header('Verification-Signature', mapped.verificationSignature);
                req.header('Webhookid', mapped.webhookid);
                req.json(mapped.body);
                return [2 /*return*/, req.call(requestOptions)];
            });
        });
    };
    return WebhooksController;
}(baseController_1.BaseController));
exports.WebhooksController = WebhooksController;
//# sourceMappingURL=webhooksController.js.map