"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.PayIDController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var payIdEnquiry_1 = require("../models/payIdEnquiry");
var payIdRegisterpayId_1 = require("../models/payIdRegisterpayId");
var payIdUpdatePayIdName_1 = require("../models/payIdUpdatePayIdName");
var payIdUpdatePayIdStatus_1 = require("../models/payIdUpdatePayIdStatus");
var receivablesEnquiryPayIdResponseV1_1 = require("../models/receivablesEnquiryPayIdResponseV1");
var receivablesRegisterPayIdResponseV1_1 = require("../models/receivablesRegisterPayIdResponseV1");
var receivablesUpdatePayIdNameResponseV1_1 = require("../models/receivablesUpdatePayIdNameResponseV1");
var receivablesUpdatePayIdStatusResponseV1_1 = require("../models/receivablesUpdatePayIdStatusResponseV1");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var PayIDController = /** @class */ (function (_super) {
    tslib_1.__extends(PayIDController, _super);
    function PayIDController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This endpoint allows the registration of a PayID against an account number. We recommend leaving 10
     * seconds before registering a PayID to ensure an account number has been enabled for NPP. The domains
     * that can be used to register a PayID are restricted. Custom domains are supported but must first be
     * approved, please contact us for configuration. The default domain is monoova.me, if the PayID field
     * is left blank we will generate a check-digited PayID on the Monoova domain.
     *
     * @param body
     * @return Response from the API call
     */
    PayIDController.prototype.receivablesRegisterPayID = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/payid/registerpayid');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(payIdRegisterpayId_1.payIdRegisterpayIdSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesRegisterPayIdResponseV1_1.receivablesRegisterPayIdResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Use this endpoint to change the name of a PayID.
     *
     * @param body
     * @return Response from the API call
     */
    PayIDController.prototype.receivablesUpdatePayIdName = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/payid/updatePayIdName');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(payIdUpdatePayIdName_1.payIdUpdatePayIdNameSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesUpdatePayIdNameResponseV1_1.receivablesUpdatePayIdNameResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Returns the details of a of a PayID. You must own the PayID to view its information.
     *
     * @param body
     * @return Response from the API call
     */
    PayIDController.prototype.receivablesPayIdEnquiry = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/payid/payIdEnquiry');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(payIdEnquiry_1.payIdEnquirySchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesEnquiryPayIdResponseV1_1.receivablesEnquiryPayIdResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * Use this endpoint to change the status of a PayID.
     *
     * @param body
     * @return Response from the API call
     */
    PayIDController.prototype.receivablesUpdatePayIdStatus = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/receivables/v1/payid/updatePayIdStatus');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(payIdUpdatePayIdStatus_1.payIdUpdatePayIdStatusSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(receivablesUpdatePayIdStatusResponseV1_1.receivablesUpdatePayIdStatusResponseV1Schema, requestOptions)];
            });
        });
    };
    return PayIDController;
}(baseController_1.BaseController));
exports.PayIDController = PayIDController;
//# sourceMappingURL=payIDController.js.map