"use strict";
/**
 * Monoova Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */
exports.__esModule = true;
exports.ToolsController = void 0;
var tslib_1 = require("tslib");
var core_1 = require("@apimatic/core");
var dTOToolsAbnValidateResponseV1_1 = require("../models/dTOToolsAbnValidateResponseV1");
var dTOToolsBsbValidateResponseV1_1 = require("../models/dTOToolsBsbValidateResponseV1");
var dTOToolsPingResponseV1_1 = require("../models/dTOToolsPingResponseV1");
var dTOToolsSendEmailResponseV1_1 = require("../models/dTOToolsSendEmailResponseV1");
var toolsSendEmailToIssuer_1 = require("../models/toolsSendEmailToIssuer");
var schema_1 = require("../schema");
var baseController_1 = require("./baseController");
var ToolsController = /** @class */ (function (_super) {
    tslib_1.__extends(ToolsController, _super);
    function ToolsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The primary purpose of the ping API is to validate your credentials as well validate that the Engine
     * servers are up and running.
     *
     * @return Response from the API call
     */
    ToolsController.prototype.toolsPing = function (requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET', '/tools/v1/ping');
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOToolsPingResponseV1_1.dTOToolsPingResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The purpose of this API is to provide email functionality for your application to send emails to the
     * Sign-In Accounts Issuer.
     *
     * @param body
     * @return Response from the API call
     */
    ToolsController.prototype.toolsSendEmailToIssuer = function (body, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('POST', '/tools/v1/sendEmailToIssuer');
                mapped = req.prepareArgs({
                    body: [body, (0, schema_1.optional)(toolsSendEmailToIssuer_1.toolsSendEmailToIssuerSchema)]
                });
                req.header('Content-Type', 'application/json');
                req.json(mapped.body);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOToolsSendEmailResponseV1_1.dTOToolsSendEmailResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The purpose of this API is to return details about a BSB (Bank-State-Branch) number. The format is a
     * string in the following format:&nbsp;‘999-999’.
     *
     * @param bsbNumber BSB (Bank-State-Branch) number. The format is a string in the following format:&nbsp;
     *                            ‘999-999’.
     * @return Response from the API call
     */
    ToolsController.prototype.toolsBsbValidate = function (bsbNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ bsbNumber: [bsbNumber, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["/tools/v1/bsbValidate/", ""], ["/tools/v1/bsbValidate/", ""])), mapped.bsbNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOToolsBsbValidateResponseV1_1.dTOToolsBsbValidateResponseV1Schema, requestOptions)];
            });
        });
    };
    /**
     * The purpose of this API is to validate that an ABN (Australian Business Number) is correct and
     * determine if it’s valid.&nbsp; This API makes a call to the Australian Business Registry returning
     * current details about the company.&nbsp; An ABN is defined as a string of eleven numeric digits.
     * Spaces are allowed but no other characters.&nbsp; If the resulting status property contains ‘Ok’
     * then examine the property isAbnValid.&nbsp; The property isCharity will be true if the entity is an
     * active registered charity.&nbsp; A list of codes and more information is available at http://abr.
     * business.gov.au/Documentation/ReferenceData
     *
     * @param abnNumber ABN (Australian Business Number)
     * @return Response from the API call
     */
    ToolsController.prototype.toolsAbnValidate = function (abnNumber, requestOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var req, mapped;
            return tslib_1.__generator(this, function (_a) {
                req = this.createRequest('GET');
                mapped = req.prepareArgs({ abnNumber: [abnNumber, (0, schema_1.string)()] });
                req.appendTemplatePath(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["/tools/v1/abnValidate/", ""], ["/tools/v1/abnValidate/", ""])), mapped.abnNumber);
                req.throwOn(400, core_1.ApiError, 'Bad request');
                req.throwOn(500, core_1.ApiError, 'Internal Server Error');
                return [2 /*return*/, req.callAsJson(dTOToolsAbnValidateResponseV1_1.dTOToolsAbnValidateResponseV1Schema, requestOptions)];
            });
        });
    };
    return ToolsController;
}(baseController_1.BaseController));
exports.ToolsController = ToolsController;
var templateObject_1, templateObject_2;
//# sourceMappingURL=toolsController.js.map